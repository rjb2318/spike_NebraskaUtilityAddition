README for Process Creator

Purpose:
 This python program has been created to generate uniform paramater files for a collection of 2D FTICR data. The program will read in a master param file and generate
param files for each data set within the folder as well as a .ps1 file for batch processing using MPI. 

Usage: 
To use the process creator, create a batch folder contraining n number of runs, all in their own files. Addtionally, copy the master parameter folder and make any
desired processing changes to the folder. Next, run spiker_runner.py and paste in the batch folder location when prompted. 


Data Hierarchy:
This program is fairly rudementary in how it works and utilizes a fairly specific file hierarchy in order to determine what files it is generating param files for. The
hierarchy is as follows. (|) denotes that the file immediatly above is a folder containing the files listed below. 

					\\Batch Directory\\
				       	         |     	         
			/		      /	        \		\
	param_controller_master.mscf	    Run_1      Run_1        batch_runner.ps1
				    	      |
	    /			/			\			\		\	
	Data.d		data_binary.msh5	param_controller.mscf	data_out.msh5	  interfile.msh5	
	   |
	experiment.m
	   |
	apexAquisition.method


Batch Directory- Any directory filepath the user finds conventient as a working location. This should be located on the fastest hardrive available to the processing pc and
not located on a removable drive as moving data to and from the computer during processing would likely cause a large slowdown to processing. 

param_controller_controller_master- This is a standard param_controller file that will be used as the template for subsequent paramater files that will actually be called
for spike.processing. The process creator will iterate through each line and fill in values for location of the raw data, the high mass of the experiment, the low frequency,
the location for the intermediate file, the location for the outfile, and the location to create the binary infile. Values below the **** line will be added in consistently
to each file such as the type of denoising to be used and the number of zerofills to be applied. 

Run_n- Two runs are shown above, but this can be any number of data sets. These are folders to contain raw data from the Bruker file folder as well as the processing
components used and generated by processing.py. 

batch_runner.ps1 - This is the powershell script that will be created at the end of the process creator. It can be clicked to run all of the commands to run processing so
that spike sequentially runs each file using MPI. 

Data.d- This is the raw data folder created by ftmsControl. All data regarding the run (and all data that will be 
created during process creator and proccessing) will be stored here. This does not have to be named run and can have any name as long as required files are stored within.

data_binary.msh5 - This is the converted formated of the raw data that has been converted by spike that will be read into the 2D processing program 

param_controller.mscf - This is the parameter controller that will be added to the powershell command line to instruct processing what to do and where to reference files. 

data_out.msh5 - This is the processed 2D data ready to be read into the viewing program 

interfile.msh5 - This is the intermediate file used by processing. It can be deleted after the program (an autodumper may be a good addition to the program as it is not 
really useful after processing)

experiment.m - Subfolder used by Bruker data files to store parameters from the aquisition

apexAquisition.method - Text file that outlines numerical values input into the paramcontroller within ftmsControl. 




Ways to break the program:
1. Having files other than master.mscf or run files in the batch directory level. (I haven't thought of a way to positvely identify a run folder as is does not carry a
consistent naming scheme or file extension coming from ftmsControl) 
2. Having spaces in your folder names. Python should prompt you that a folder doesnt exist and will give an incomplete name.